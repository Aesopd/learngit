git add .	//该文件夹下所有文件全部git add
git add readme.txt	//加入readme.txt一个文件
git commit -m "balabalabala"	//-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。
git status	//显示工作区状态
git diff	//如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
git log		//查看历史记录
git log --pretty=oneline		//git log的简洁显示版，前面是commit id（版本号）
	//在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
git reset --hard HEAD^			//回退到上一个版本
git reset --hard {commit id}	//跳转到这个版本号，可进可退，本质是改变HEAD指针指向的版本
	//你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？
git reflog						//用来记录你的每一次命令,可查看历史commit id
	//在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令

git diff HEAD -- readme.txt		//可以查看工作区和版本库里面最新版本的区别(前提是都在看readme.txt）
git checkout -- readme.txt		//linux
git restore readme.txt			//windows
git restore --staged readme.txt	//windows
	//意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

	//一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	  上述命令为	git restore readme.txt
	//一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	  上述命令为	git restore --staged readme.txt
	//总之，就是让这个文件回到最近一次git commit或git add时的状态。
git reset HEAD <file>			//可以把暂存区的修改撤销掉（unstage），重新放回工作区
git rm readme.txt	+	git commit			//从版本库中删除该文件，那就用命令git rm删掉，并且git commit
git checkout -- test.txt		//不小心把readme.txt删掉了，删错了，但是版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：






